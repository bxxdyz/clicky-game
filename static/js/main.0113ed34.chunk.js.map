{"version":3,"sources":["assets/sounds/correctFX.wav","assets/sounds/starcraftTHEME.mp3","assets/sounds/wrongFX.wav","components/header/header.js","components/alerts/alerts.js","components/score/score.js","components/main/main.js","components/footer/footer.js","components/card/card.js","components/app/app.js","registerServiceWorker.js","index.js"],"names":["module","exports","popoverLeft","Popover","id","Header","props","className","OverlayTrigger","trigger","placement","overlay","Button","src","alt","Alerts","Alert","bsStyle","alertType","message1","message2","Score","shake","score","topScoreType","topScore","Main","volumeOn","onClick","volume","children","Footer","href","target","rel","Card","increment","shuffle","image","name","App","state","cards","selected","soundURL","theme","soundPosition","soundStatus","Sound","status","PLAYING","setState","sort","a","b","Math","random","volumeClick","PAUSED","incrementClick","includes","soundIncorrect","setTimeout","this","bind","push","newScore","soundCorrect","map","i","key","autoLoad","url","playStatus","playPosition","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0113ed34.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/correctFX.74b9a09d.wav\";","module.exports = __webpack_public_path__ + \"static/media/starcraftTHEME.0da37542.mp3\";","module.exports = __webpack_public_path__ + \"static/media/wrongFX.356f45c0.wav\";","/*Imports section for our React*/\nimport React from 'react';\nimport \"./header.css\";\nimport Popover from 'react-bootstrap/Popover';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Button from 'react-bootstrap/Button';\n\n\n/*Define the pop up instructions for instructions with a constant function*/\nconst popoverLeft = (\n    <Popover id=\"popover-positioned-left\">\n        <strong>Game Instructions</strong><br/>\n        Click on a Starcraft hero to earn points, but don't select a hero more than once!\n    </Popover>\n);\n\n/*Define the header static components with a constant function*/\nconst Header = props => (\n    <header className=\"header row\">\n        <div className=\"col-lg-3\"></div>\n        <div className=\"col-lg-6 text-center\">\n            <OverlayTrigger trigger=\"click\" placement=\"left\" overlay={popoverLeft}>\n                <Button className=\"logo-button btn-dark\">\n                    <img src=\"../assets/images/sc-logo.svg\" className=\"bobs-burgers\" alt=\"Clicky Starcraft Game\"/>\n                </Button>\n            </OverlayTrigger>\n        </div>\n        <div className=\"col-lg-3\"></div>\n    </header>\n)\n/*Export the header directory from here*/\nexport default Header;","/*Imports section for our React, this is basically like our routing to render our footer*/\nimport React from 'react';\n\n/*Imports section for our React, this is basically like our routing to render our alerts*/\nimport './alerts.css';\nimport Alert from 'react-bootstrap/Alert';\n\n/*Define the Alerts static components with a constant function*/\nconst Alerts = props => (\n    <Alert bsStyle={`${props.alertType}`}>\n        <h3>\n            <strong>{props.message1}</strong> {props.message2}\n        </h3>\n    </Alert>\n);\n/*Export Alerts code to react app config*/\nexport default Alerts;","/*Imports section for our React*/\nimport React from 'react';\nimport \"./score.css\";\n\n/*Define the the score controller and static elements with a constant function*/\nconst Score = props => (\n    <div className=\"row\">\n        <div className=\"col-lg-2\"></div>\n        <div className=\"col-lg-4\">\n\n            <button id={props.shake} className={`btn btn-block btn-score btn-${props.alertType}`}>\n                <h3>Score <span className=\"badge\">{props.score}</span></h3>\n            </button>\n            \n        </div>\n\n        <div className=\"col-lg-4\">\n            <button className={`btn btn-block btn-score btn-${props.topScoreType}`}>\n                <h3>Top Score <span className=\"badge\">{props.topScore}</span></h3>\n            </button>\n        </div>\n        <div className=\"col-lg-2\"></div>\n    </div>\n)\n/*Export the Score props from here*/\nexport default Score;","/*Imports section for our React*/\nimport React from 'react';\nimport \"./main.css\";\n\n/*Define the the main controllers with a constant function*/\nconst Main = props => (\n    <main className={`${props.shake}`}>\n        <div className=\"gif\">\n            <button className={`btn btn-link ${props.volumeOn}`} onClick = {() => { props.volume(); }}>\n                <i className={`fas fa-volume-up fa-4x volume-icon`}></i>\n            </button>\n            <button className={`btn btn-link`} onClick = {() => { props.volume(); }}>\n                <i className={\"fas fa-volume-off fa-4x volume-icon\"}></i>\n            </button>\n        </div>\n        <div className=\"container\">\n            {props.children}\n        </div>\n       <div className=\"blank-div-1\">\n       </div>\n    </main>\n)\n/*Export the main directory from here*/\nexport default Main;","/*Imports section for our React, this is basically like our routing to render our footer*/\nimport React from 'react';\nimport \"./footer.css\";\n\n/*Define the footer static components with a constant function*/\nconst Footer = props => (\n    <table>\n        <tbody>\n            <tr>\n                <td className=\"align-middle\">\n                    <a href=\"https://npmjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">\n                        <i className=\"fab fa-npm fa-2x\"></i>\n                    </a>\n                    <a href=\"https://reactjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">\n                        <i className=\"fab fa-react fa-2x\"></i>\n                    </a>\n                    <a href=\"https://github.com/bxxdyz/clicky-game\" target=\"_blank\" rel=\"noopener noreferrer\">\n                        <i className=\"fab fa-github fa-2x\"></i>\n                    </a>\n                    <div className=\"spacer\"></div>\n                    BXXDYZ 2019 ©\n                </td>\n            </tr>\n        </tbody>\n    </table>\n)\n\n/*Export the card directory from here*/\nexport default Footer;","/*Imports section for our React, this is basically like our routing to render our cards*/\nimport React from \"react\";\nimport \"./card.css\";\n\n/*Define the Card static components with a constant function*/\nconst Card = props => (\n    \n    <div className=\"row\">\n  \n    <div className=\"click-item neutral vcenter\" onClick = {() => { props.increment(props.id); props.shuffle(props.id); }}>\n\n        <img className=\"card-image\" src={props.image} alt={props.name}/>\n\n    </div>\n    <div className=\"col-lg-2\"></div>\n\n    </div>\n);\n\n/*Export Card code to react app config*/\nexport default Card;","/*Imports section for our React, this is basically like our routing to render certain elements within the app especially important elements like header, footer and cards for our gane*/\nimport React, { Component } from 'react';\n\nimport Sound from 'react-sound';\n\nimport './app.css';\n\nimport Header from '../header/header.js';\n\nimport Alerts from '../alerts/alerts.js';\n\nimport Score from '../score/score.js';\n\nimport Main from '../main/main.js';\n\nimport Footer from '../footer/footer.js';\n\nimport Card from '../card/card.js';\n\nimport cards from '../../assets/json/cards.json';\n\nimport soundCorrect from '../../assets/sounds/correctFX.wav';\n\nimport soundIncorrect from '../../assets/sounds/wrongFX.wav';\n\nimport theme from '../../assets/sounds/starcraftTHEME.mp3';\n\n/*This is the lifestat command to load all elements and functions for the page*/\nclass App extends Component{\n\n/*Set the default state of the application*/\n    state = {\n        cards,\n        score: 0,\n        topScore: 0,\n        selected: [],\n        soundURL: theme,\n        soundPosition: 0,\n        soundStatus: Sound.status.PLAYING,\n        shake: \"\",\n        message1: \"Select a Starcraft hero to begin the game!\",\n        message2: \"\",\n        alertType: \"info\",\n        topScoreType: \"info\",\n        volume: \"on\"\n    };\n\n    /*An \"onClick\" function that suffles the cards upon mouse click*/\n    shuffle = id => {\n        this.setState({\n            cards: this.state.cards.sort(function(a,b){\n                    return 0.5 - Math.random();\n                }\n            )\n        })\n    }\n    \n    /*An \"onClick\" function that plays music when a card is selected*/\n    volumeClick = () => {\n        if(this.state.volume === \"off\"){\n            this.setState({ \n                volume: \"on\",\n                soundStatus: Sound.status.PLAYING\n            });\n        }\n        else{\n            this.setState({ \n                volume: \"off\",\n                soundStatus: Sound.status.PAUSED,\n                soundURL: theme\n            });\n            \n        }\n    };\n\n    /*Dynamically change the score with a large block of boolean statements through the \"incrementClick\" function*/\n    incrementClick = id => {\n        let ids = this.state.selected\n        const incorrect = ids.includes(id);\n        if(!incorrect){\n            this.state.selected.push(id);\n            let newScore = this.state.score + 1;\n            this.setState({score: newScore});\n            if(newScore === 12){\n                this.setState({\n                    score: 0,\n                    selected: [],\n                    topScore: newScore,\n                    message1: \"Congratulations you win!\",\n                    message2: \"\",\n                    alertType: \"success\"\n                });\n                if(this.state.volume === \"on\"){\n                    this.setState({ \n                        soundStatus: Sound.status.PLAYING,\n                        soundPosition: 0,\n                        soundURL: soundCorrect\n                    });\n                }\n            }\n            else if(newScore > this.state.topScore){\n                this.setState({\n                    topScore: newScore, \n                    message1: \"LET'S GO!\",\n                    message2: \"You guessed correctly!\",\n                    alertType: \"success\",\n                    topScoreType: \"success\"\n                });\n                if(this.state.volume === \"on\"){\n                    this.setState({ \n                        soundStatus: Sound.status.PLAYING,\n                        soundPosition: 0,\n                        soundURL: soundCorrect\n                    });\n                }\n            }\n            else{\n                this.setState({\n                    message1: \"LET's GO!\",\n                    message2: \"You guessed correctly!\",\n                    alertType: \"success\",\n                    topScoreType: \"info\"\n                });\n                if(this.state.volume === \"on\"){\n                    this.setState({ \n                        soundStatus: Sound.status.PLAYING,\n                        soundPosition: 0,\n                        soundURL: soundCorrect\n                    });\n                }\n            }\n        }\n        \n        else{\n            this.setState({\n                score: 0,\n                selected: [], \n                shake: \"incorrect\",\n                message1: \"YOU ARE WRONG!\",\n                message2: \"Start over and try again!\",\n                alertType: \"danger\",\n                topScoreType: \"info\"\n            });\n            if(this.state.volume === \"on\"){\n                this.setState({ \n                    soundStatus: Sound.status.PLAYING,\n                    soundPosition: 0,\n                    soundURL: soundIncorrect\n                });\n            }\n            setTimeout(function(){ \n                this.setState({ shake: \"\" }); \n            }.bind(this), 1000);\n        }\n    };\n\n    /*Our render section is going to render the elements on the page from our js and css files*/\n    render(){\n        return(\n            <div className=\"app\">\n                <Header/>\n                <Alerts\n                    message1={this.state.message1}\n                    message2={this.state.message2}\n                    alertType={this.state.alertType}\n                />\n                <Score \n                    shake={this.state.shake}\n                    score={this.state.score} \n                    topScore={this.state.topScore}\n                    alertType={this.state.alertType}\n                    topScoreType={this.state.topScoreType}\n                />\n                <Main \n                    shake={this.state.shake}\n                    volumeOn={this.state.volume}\n                    volume={this.volumeClick}\n                >\n                    {this.state.cards.map((cards,i) => (\n                        <Card \n                            id={cards.id} \n                            name={cards.name} \n                            image={cards.image} \n                            key={i} \n                            increment={this.incrementClick} shuffle={this.shuffle}\n                        />\n                    ))}\n                </Main>\n                <Sound \n                    autoLoad={true} \n                    url={this.state.soundURL} \n                    playStatus={this.state.soundStatus} \n                    playPosition={this.state.soundPosition}\n                />\n                <Footer/>\n            </div>\n        );\n    };\n}\n\n/*Export app code to react app config*/\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app';\nimport * as registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nregisterServiceWorker.unregister();"],"sourceRoot":""}